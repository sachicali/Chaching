rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    function isValidUser() {
      return request.auth != null && request.auth.token.email_verified == true;
    }
    
    function hasRequiredFields(fields) {
      return request.resource.data.keys().hasAll(fields);
    }
    
    // Development mode helper - allows access for test user
    function isDevelopmentTestUser(userId) {
      return userId == 'dev-test-user-123';
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isOwner(userId) || isDevelopmentTestUser(userId);
      allow create: if isOwner(userId) && 
        hasRequiredFields(['email', 'createdAt', 'updatedAt']);
      allow update: if isOwner(userId) && 
        request.resource.data.email == resource.data.email && // Can't change email
        request.resource.data.createdAt == resource.data.createdAt; // Can't change creation date
      allow delete: if false; // Users cannot delete their accounts via client
      
      // User subcollections
      match /clients/{clientId} {
        allow read, write: if isOwner(userId) || isDevelopmentTestUser(userId);
        allow create: if (isOwner(userId) && 
          hasRequiredFields(['name', 'status', 'type', 'createdAt', 'updatedAt'])) ||
          isDevelopmentTestUser(userId);
      }
      
      match /transactions/{transactionId} {
        allow read: if isOwner(userId) || isDevelopmentTestUser(userId);
        allow write: if isOwner(userId) || isDevelopmentTestUser(userId);
        allow create: if (isOwner(userId) && 
          hasRequiredFields(['amount', 'currency', 'type', 'date', 'description', 'category'])) ||
          isDevelopmentTestUser(userId);
        allow update: if isOwner(userId) || isDevelopmentTestUser(userId);
      }
      
      match /categories/{categoryId} {
        allow read, write: if isOwner(userId) || isDevelopmentTestUser(userId);
        allow create: if (isOwner(userId) && 
          hasRequiredFields(['name', 'type', 'color', 'icon'])) ||
          isDevelopmentTestUser(userId);
      }
      
      match /invoiceTemplates/{templateId} {
        allow read, write: if isOwner(userId);
      }
      
      match /goals/{goalId} {
        allow read, write: if isOwner(userId);
      }
      
      match /auditLogs/{logId} {
        allow read: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update, delete: if false; // Audit logs are immutable
      }
      
      // AI Categorization feedback collection
      match /categorizationFeedback/{feedbackId} {
        allow read, write: if isOwner(userId) || isDevelopmentTestUser(userId);
        allow create: if (isOwner(userId) && 
          hasRequiredFields(['transactionId', 'suggestedCategory', 'chosenCategory', 'confidence', 'timestamp'])) ||
          isDevelopmentTestUser(userId);
      }
    }
    
      // Additional user subcollections for financial data
      match /invoices/{invoiceId} {
        allow read, write: if isOwner(userId);
        allow create: if isOwner(userId) && 
          hasRequiredFields(['invoiceNumber', 'clientId', 'status', 'currency', 'total']);
        allow delete: if isOwner(userId) && 
          resource.data.status == 'draft'; // Can only delete drafts
      }
      
      match /payments/{paymentId} {
        allow read, write: if isOwner(userId);
        allow create: if isOwner(userId) && 
          hasRequiredFields(['invoiceId', 'amount', 'currency', 'paymentDate', 'status']);
        allow delete: if false; // Payments cannot be deleted
      }
    
    // Email History collection
    match /emailHistory/{emailId} {
      allow read: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid &&
        request.resource.data.userId == resource.data.userId;
      allow delete: if false; // Email history is immutable
    }
    
    // Email Analytics collection
    match /emailAnalytics/{analyticsId} {
      allow read: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow delete: if false;
    }
    
    // Email Templates collection - can be shared
    match /emailTemplates/{templateId} {
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || 
         resource.data.isPublic == true ||
         resource.data.sharedWith[request.auth.uid] == true);
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }
    
    // Scheduled Emails collection
    match /scheduledEmails/{emailId} {
      allow read: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }
    
    // Email Queue collection
    match /emailQueue/{queueId} {
      allow read: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }
    
    // Exchange Rates collection - read-only for all authenticated users
    match /exchangeRates/{rateId} {
      allow read: if isAuthenticated();
      allow write: if false; // Only server can write exchange rates
    }
    
    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }
  }
}