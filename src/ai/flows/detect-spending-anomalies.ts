// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview An AI agent to detect spending anomalies.
 *
 * - detectSpendingAnomalies - A function that handles the detection of spending anomalies.
 * - DetectSpendingAnomaliesInput - The input type for the detectSpendingAnomalies function.
 * - DetectSpendingAnomaliesOutput - The return type for the detectSpendingAnomalies function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const DetectSpendingAnomaliesInputSchema = z.object({
  spendingData: z.string().describe('A stringified JSON array of spending data, where each object has a category and amount property.'),
  averageSpendingByCategory: z.string().describe('A stringified JSON object of average spending per category.'),
});
export type DetectSpendingAnomaliesInput = z.infer<typeof DetectSpendingAnomaliesInputSchema>;

const DetectSpendingAnomaliesOutputSchema = z.object({
  anomalies: z.array(
    z.object({
      category: z.string().describe('The category where the anomaly was detected.'),
      amount: z.number().describe('The amount spent in the category.'),
      deviation: z.string().describe('A description of how much the spending deviates from the average.'),
      reason: z.string().describe('The reasoning behind why this spending is considered an anomaly.'),
    })
  ).describe('An array of detected spending anomalies.'),
});
export type DetectSpendingAnomaliesOutput = z.infer<typeof DetectSpendingAnomaliesOutputSchema>;

export async function detectSpendingAnomalies(input: DetectSpendingAnomaliesInput): Promise<DetectSpendingAnomaliesOutput> {
  return detectSpendingAnomaliesFlow(input);
}

const prompt = ai.definePrompt({
  name: 'detectSpendingAnomaliesPrompt',
  input: {schema: DetectSpendingAnomaliesInputSchema},
  output: {schema: DetectSpendingAnomaliesOutputSchema},
  prompt: `You are an AI financial assistant that analyzes spending data to detect anomalies.

You are given spending data and average spending by category.

Spending Data: {{{spendingData}}}
Average Spending by Category: {{{averageSpendingByCategory}}}

Analyze the spending data and identify any anomalies, such as unusual spikes in spending within specific categories.
For each anomaly, provide the category, amount, deviation from the average, and reason for being considered an anomaly.
Return the anomalies in the format specified in the output schema. If no anomalies are found, return an empty array.
`,
});

const detectSpendingAnomaliesFlow = ai.defineFlow(
  {
    name: 'detectSpendingAnomaliesFlow',
    inputSchema: DetectSpendingAnomaliesInputSchema,
    outputSchema: DetectSpendingAnomaliesOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
